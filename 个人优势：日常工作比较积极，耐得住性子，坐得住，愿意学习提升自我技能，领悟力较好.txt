个人优势：日常工作比较积极，耐得住性子，坐得住，愿意学习提升自我技能，领悟力较好，能不断总结和提高，有较强的问题解决能力，能够完成复杂且较高难度的技术开发工作



一旦你对 DOWN 事件返回了 true，后续的 MOVE 和 UP 事件都会被直接传递给你
ACTION_DOWN 事件不受requestDisallowInterceptTouchEvent方法影响

launchWhenStarted 只是在 STARTED 状态时挂起和恢复协程，协程本身不会被取消和重新启动，适合仅需在特定状态执行一次的任务，容易资源浪费，已废弃
repeatOnLifecycle 在离开指定状态时会取消协程，再次进入指定状态时会重新启动协程，适合需要持续响应生命周期变化的任务，如数据刷新、定时任务等
Flow#flowWithLifecycle(lifecycle, Lifecycle.State.STARTED)
addRepeatingJob

```kotlin
    //感知 activity 或 fragment 的生命周期
   viewLifecycleOwner.lifecycleScope.launch {
           //确保只有当 Lifecycle 处于 STARTED 状态时才收集流中的数据，同时两者组合就能感知协程的生命周期了
       viewLifecycleOwner.repeatOnLifecycle(Lifecycle.State.STARTED) {
           //
           viewModel.someDataFlow.collect {
               // Process item
           }
       }
   }
```